/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.5.1/userguide/building_java_projects.html
 */
plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}

// Define project properties
ext {
    mod_org_id = project.property('mod_org_id')
    mod_version = project.property('mod_version')
    mod_url = project.property('mod_url')
    mod_id = project.property('mod_id')
    mod_org = project.property('mod_org')
    mod_name = project.property('mod_name')
    starmade_root = project.property('starmade_root')
}

group = mod_org_id
version = mod_version

// Java compatibility settings
sourceCompatibility = JavaVersion.VERSION_1_7
targetCompatibility = JavaVersion.VERSION_1_7

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    //compiletime dep
    implementation files(starmade_root + "StarMade.jar")
    implementation fileTree(dir: starmade_root + "lib", include: ['*.jar'])
    implementation fileTree(dir: "${projectDir}/lib", include: ['*.jar'])
    testImplementation 'junit:junit:4.12'


}

tasks.withType(Jar) {
    manifest {
        attributes 'Built-By': System.getProperty('user.name'),
                'url': mod_url,
                'Implementation-Title': mod_name,
                'Implementation-Version': mod_version,
                'Implementation-Vendor-Id': mod_org_id,
                'Implementation-Vendor': mod_org
    }
}


// Task to create a fat JAR
task createFatJar(type: Jar) {
    dependsOn configurations.runtimeClasspath
    from sourceSets.main.output
    // Include dependencies in the JAR
    from {
        configurations.runtimeClasspath.findAll {
            it.name.endsWith('ModGlossar.jar') || it.name.endsWith('MapDrawerUtils.jar')
        }.collect { zipTree(it) }
    }
    // Manifest file setup
    manifest {
        attributes 'Built-By': System.getProperty('user.name'),
                'url': mod_url,
                'Implementation-Title': mod_name,
                'Implementation-Version': mod_version,
                'Implementation-Vendor-Id': mod_org_id,
                'Implementation-Vendor': mod_org
    }
    // Name of the generated JAR
    archiveFileName = "${mod_name}-${mod_version}.jar"
    destinationDir = file("$buildDir/libs")
}


// Define the runServer task
task runServer(type: JavaExec) {
    dependsOn createFatJar
    group = 'Game'
    description = 'Run the game with the mod injected for debugging. Might require manual activation of the mod via the client first.'
    classpath = sourceSets.main.compileClasspath
    main = 'me.jakev.starloader.LaunchClassLoader'
    systemProperty 'java.library.path', "${starmade_root}native/${starmade_root}native/windows/x64/${starmade_root}native/solaris/x64"
    args = ['-server', '-force']
    doFirst {
        workingDir = file(starmade_root)
        def jarFile = tasks.createFatJar.archiveFile.get().asFile
        copy {
            from jarFile.parent
            into "${starmade_root}mods"
            include jarFile.name
        }
    }
}

// Define the runClient task
task runClient(type: JavaExec) {
    dependsOn createFatJar
    group = 'Game'
    description = 'Run the game with the mod injected. Debugging features like breakpoints may not work, due to how the client is threaded.'
    classpath = sourceSets.main.compileClasspath
    main = 'me.jakev.starloader.LaunchClassLoader'
    systemProperty 'java.library.path', "${starmade_root}native/${starmade_root}native/windows/x64/${starmade_root}native/solaris/x64"
    args = ["-force","-uplink","192.168.178.20", "4242", "${mod_id}"]
    doFirst {
        workingDir = file(starmade_root)
        def jarFile = tasks.createFatJar.archiveFile.get().asFile
        copy {
            from jarFile.parent
            into "${starmade_root}mods"
            include jarFile.name
        }
    }
}

// Define the runClient task
task runSP(type: JavaExec) {
    dependsOn createFatJar
    group = 'Game'
    description = 'Run the game with the mod injected. Debugging features like breakpoints may not work, due to how the client is threaded.'
    classpath = sourceSets.main.compileClasspath
    main = 'me.jakev.starloader.LaunchClassLoader'
    systemProperty 'java.library.path', "${starmade_root}native/${starmade_root}native/windows/x64/${starmade_root}native/solaris/x64"
    args = ["-force"]
    doFirst {
        workingDir = file(starmade_root)
        def jarFile = tasks.createFatJar.archiveFile.get().asFile
        copy {
            from jarFile.parent
            into "${starmade_root}mods"
            include jarFile.name
        }
    }
}

build.dependsOn createFatJar
